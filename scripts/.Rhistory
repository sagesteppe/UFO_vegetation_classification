nTT <- 1000
sF <- 1.5
I <- 0.01
train <- read.csv(file.path('../data/processed/', 'rf_training_data.csv')) %>%
select(class)
classes <- train %>%
count(class) %>%
mutate(values = paste0(class, "-", n)) %>%
pull(values)
test <- read.csv(file.path('../data/processed/', 'rf_testing_data.csv'))
prds <- '../results/stats'
veg_rf_model <- readRDS(file = file.path(prds, 'RandomForest2022-10-31.rds'))
test$class <- as.factor(test$class)
data.frame(randomForest::importance(veg_rf_model, type = 2))# %>% # modifies in place!!! OOP :-) BUT assigned to deal with markdown.
#  rownames_to_column('Variable') %>%
#  arrange(-MeanDecreaseGini) %>% # these results are to in the weeds
#  knitr::kable( col.names = c('Variable', 'Importance'),  align = "l", digits = 3,
#                caption = "Variable Importance in Random Forest Model")
# plot(veg_rf_model) # beyond the scope of the write-up
# generate a confusion matrix to determine accuracy on real data
test_prediction <- predict(veg_rf_model, test)
cmRestrat <- caret::confusionMatrix(test_prediction, test$class)
rm(test_prediction, train_prop, test, prds, classes)
p <- '/media/sagesteppe/ExternalHD/UFO_AIM_Design_Stratification'
pts2test <- st_read('../data/processed/StratTest/TestSetStratification.shp', quiet = T) %>% vect()
pts2test <- st_read('../data/processed/StratTest/TestSetStratification.shp', quiet = T) %>% vect()
gap <- rast('/media/sagesteppe/ExternalHD/UFO_AIM_Design_Stratification/processed/UFO_Strata.tif')
pts2test <- project(pts2test, crs(gap))
reprocessedGAP <- read.csv(file.path(p, 'processed', 'UFO_strata_areas.csv')) %>%
select(RasterValue, Code, Cells)
factor_lvls <- c("AS", "MC", "MMS", "PJ", "SD", "SS", "RI", "OT", "GR", "PP" )
a <- extract(gap, pts2test, method = 'simple', touches = F)
a <- extract(gap, pts2test, method = 'simple', touches = F)
a <- a[complete.cases(a),]
a <- a[complete.cases(a),]
pts2test <- st_as_sf(pts2test) %>%
st_drop_geometry() %>%
select(VegClass) %>%
rowid_to_column('ID')
mdsOrig <- a %>%
group_by(ID) %>% # these are the original values.
summarise(OriginalCover = Mode(BPS_CODE)) %>%
left_join(., pts2test, by = 'ID') %>%
left_join(., reprocessedGAP, by = c('OriginalCover' = 'RasterValue')) %>%
select(True = VegClass, Original = Code) %>%
mutate(across(.cols = everything(), ~ factor(.x, levels = factor_lvls)))
cmOrig <- caret::confusionMatrix(mdsOrig$True, mdsOrig$Original)
rm(factor_lvls, a, mdsOrig, gap)
RestratDiagnostics <- data.frame(
'Version' = rep('Original', length(rownames(cmRestrat[[4]]))),
'Class' = gsub('Class: ', '', rownames(cmRestrat[[4]])),
'Specificity' = cmRestrat[[4]][, grep('Specificity', colnames(cmRestrat[[4]])) ] ,
'Sensitivity' = cmRestrat[[4]][, grep('Sens', colnames(cmRestrat[[4]])) ],
'Accuracy' = cmRestrat[[4]][, grep('Bala', colnames(cmRestrat[[4]])) ]
)
OrigDiagnostics <- data.frame(
'Version' = rep('Restratified', length(rownames(cmOrig[[4]]))),
'Class' = gsub('Class: ', '', rownames(cmOrig[[4]])),
'Specificity' = cmOrig[[4]][, grep('Specificity', colnames(cmOrig[[4]])) ] ,
'Sensitivity' = cmOrig[[4]][, grep('Sens', colnames(cmOrig[[4]])) ],
'Accuracy' = cmOrig[[4]][, grep('Bala', colnames(cmOrig[[4]])) ]
)
OrigDiagnostics <- filter(OrigDiagnostics, Class %in% RestratDiagnostics$Class)
dg <- bind_rows(RestratDiagnostics, OrigDiagnostics) %>%
filter(!Class %in% c('AS', 'MC')) %>%
mutate(Version = as_factor(Version))
strata_pal2 <- c(strata_pal, strata_pal)
strata_pal2 <- strata_pal2[match(dg$Class, names(strata_pal2))]
strata_pal2 <- strata_pal2[1:nrow(dg)]
shapes = c(18, 20)
shapes <- shapes[as.numeric(dg$Version)]
png('../results/figures/scatterplot.png')
par(mar = c(1.1, 3.1, 2.1, 3.1))
scatterplot3d::scatterplot3d(z = dg$Specificity, y = dg$Sensitivity, x = dg$Accuracy, type="h",
pch = shapes, color = strata_pal2, cex.symbols = 2, box = F,las=1,
zlab = 'Specificity', ylab = 'Sensitivity', xlab = 'Balanced Accuracy',
zlim  = c(0.5, 1), xlim  = c(0.5, 1), angle = 45, cex.axis = 0.6,
main="Relationships between diagnostic\nmetrics for vegetation types")
dev.off()
shhh <- suppressPackageStartupMessages
shhh(library(tidyverse))
shhh(library(terra))
shhh(library(sf))
shhh(library(here))
set.seed(72)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
strata_pal <- setNames(
c('#4A5A28', '#ADB1B9', '#CEB88E', '#574039', '#B64841',
'#1357a6', '#1B1212', '#F9E076', '#39993A', '#00688B'),
c('PJ', 'SS', 'SD', 'MMS', 'AS', 'RI', 'OT', 'GR', 'PP', 'MC')
)
stats <- c("mean", "variance", 'homogeneity', 'contrast', 'dissimilarity')
wind <- c(5, 5)
random <- file.path('../data/processed/',
list.files('../data/processed/',  pattern = '*Random*'))
reg <- file.path('../data/processed/',
list.files('../data/processed/',  pattern = '*Regular*'))
twenty22 <- read.csv('../data/processed/UFO_2022_AIM_CLASSIFIED.csv')
historicVeg <- read.csv('../data/processed/UFO_Veg_monitoring_CLASSIFIED.csv') %>%
mutate(across(where(is.character), ~ na_if(., "")))
plot_drawn <- (nrow(twenty22) + nrow(historicVeg))
plot_class <- bind_rows(twenty22, historicVeg) %>% drop_na()
reg_drawn <- do.call(rbind, lapply(reg, function(x)
read.csv(x, stringsAsFactors = FALSE)))
reg_pts <- reg_drawn %>%
drop_na() %>%
filter(VegClass %in% c('AS', 'MC', 'PJ', 'SD', 'SS', 'MMS'))
random_drawn <- do.call(rbind, lapply(random, function(x)
read.csv(x, stringsAsFactors = FALSE))) %>%
mutate(across(where(is.character), ~ na_if(., "")))
random_pts <- random_drawn %>% drop_na()
rm(random, twenty22, historicVeg)
p <- file.path(here::here(), 'data/processed')
reg_pts <-  reg_pts %>%
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
mutate(Type = 'Regular', .after = 'ID') %>%
mutate(ID = as.character(ID)) %>%
st_transform(26912) %>%
st_buffer(30)
random_pts <- random_pts %>%
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
mutate(Type = 'Random2', .after = 'ID') %>%
st_transform(26912) %>%
st_buffer(30) %>%
mutate(ID = as.character(ID)) %>%
mutate(across(where(is.character), ~na_if(., ""))) %>%
filter(VegClass %in% c('PJ', 'SD', 'SS', 'MMS'))
veg_pts <- plot_class %>%
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
mutate(Type = 'Stratified', .after = 'ID') %>%
st_transform(26912) %>%
st_buffer(30) %>%
mutate(ID = as.character(ID))
# AIM DATA post K-Means is read in here
#veg_pts <- st_read(file.path(p, '/reclassified_AIM/reclassified_AIM.shp'), quiet = T) %>%
#  st_transform(26912) %>%  # these alreday buffered by type.
#  rename(ID = PlotKey, Type = Plot, VegClass = Veg_type) %>%
#  bind_rows(., computer_pts) %>%
#  drop_na() %>%
#  vect()
# alt route use the manually classified
veg_pts <- bind_rows(veg_pts, random_pts, reg_pts) %>%
as(., "Spatial") %>%
vect()
rm(reg_pts, random_pts, plot_drawn, random_drawn, reg_drawn)
train_prop <- 0.7
mTry <- 4
nTT <- 1000
sF <- 1.5
I <- 0.01
train <- read.csv(file.path('../data/processed/', 'rf_training_data.csv')) %>%
select(class)
classes <- train %>%
count(class) %>%
mutate(values = paste0(class, "-", n)) %>%
pull(values)
test <- read.csv(file.path('../data/processed/', 'rf_testing_data.csv'))
prds <- '../results/stats'
veg_rf_model <- readRDS(file = file.path(prds, 'RandomForest2022-10-31.rds'))
test$class <- as.factor(test$class)
data.frame(randomForest::importance(veg_rf_model, type = 2))# %>% # modifies in place!!! OOP :-) BUT assigned to deal with markdown.
#  rownames_to_column('Variable') %>%
#  arrange(-MeanDecreaseGini) %>% # these results are to in the weeds
#  knitr::kable( col.names = c('Variable', 'Importance'),  align = "l", digits = 3,
#                caption = "Variable Importance in Random Forest Model")
# plot(veg_rf_model) # beyond the scope of the write-up
# generate a confusion matrix to determine accuracy on real data
test_prediction <- predict(veg_rf_model, test)
cmRestrat <- caret::confusionMatrix(test_prediction, test$class)
rm(test_prediction, train_prop, test, prds, classes)
p <- '/media/sagesteppe/ExternalHD/UFO_AIM_Design_Stratification'
pts2test <- st_read('../data/processed/StratTest/TestSetStratification.shp', quiet = T) %>% vect()
gap <- rast('/media/sagesteppe/ExternalHD/UFO_AIM_Design_Stratification/processed/UFO_Strata.tif')
pts2test <- project(pts2test, crs(gap))
reprocessedGAP <- read.csv(file.path(p, 'processed', 'UFO_strata_areas.csv')) %>%
select(RasterValue, Code, Cells)
factor_lvls <- c("AS", "MC", "MMS", "PJ", "SD", "SS", "RI", "OT", "GR", "PP" )
a <- extract(gap, pts2test, method = 'simple', touches = F)
a <- a[complete.cases(a),]
pts2test <- st_as_sf(pts2test) %>%
st_drop_geometry() %>%
select(VegClass) %>%
rowid_to_column('ID')
mdsOrig <- a %>%
group_by(ID) %>% # these are the original values.
summarise(OriginalCover = Mode(BPS_CODE)) %>%
left_join(., pts2test, by = 'ID') %>%
left_join(., reprocessedGAP, by = c('OriginalCover' = 'RasterValue')) %>%
select(True = VegClass, Original = Code) %>%
mutate(across(.cols = everything(), ~ factor(.x, levels = factor_lvls)))
cmOrig <- caret::confusionMatrix(mdsOrig$True, mdsOrig$Original)
rm(factor_lvls, a, mdsOrig, gap)
library(waffle)
library(tidyverse)
library(cowplot)
# original land cover of sample design
p <- '../../UFO_AIM_Design_Stratification'
initialGAP <- read.csv(file.path(p, 'raw', 'lookupTable.txt'))
reprocessedGAP <- reprocessedGAP %>%
mutate(Percent = round((Cells/sum(Cells) ) *100)) %>%
arrange(-Percent)
strata_pal <- strata_pal[order(match(names(strata_pal),reprocessedGAP$Code))]
strata_waffle <- ggplot(reprocessedGAP, aes(fill = Code, values = Percent)) +
geom_waffle(color = 'white') +
scale_fill_manual(name = 'Statum',
values = strata_pal,
labels = names(strata_pal)) +
coord_equal() +
theme_void() +
labs(title = 'initial stratification')  +
guides(fill=guide_legend(ncol=2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.title.align = 0.5,
plot.margin = unit(c(0.0,0.0,0.0,0.0), "lines"))
legend <- get_legend(strata_waffle)
strata_waffle <- strata_waffle + theme(legend.position='none')
# now a waffle of what percent habitat plots were located actually IN ??
veg_pts <- veg_pts %>%
st_as_sf() %>%
st_drop_geometry() %>%
filter(Type != 'Stratified') %>%
group_by(VegClass) %>%
count() %>%
ungroup() %>%
mutate(Percent = round((n/sum(n))*100 ))  %>%
arrange(-Percent)
strata_pal <- strata_pal[order(match(names(strata_pal),veg_pts$VegClass))]
strata_pal3 <- strata_pal[1:nrow(veg_pts)]
random_waffle <- ggplot(veg_pts, aes(fill = VegClass, values = Percent)) +
geom_waffle(color = 'white') +
scale_fill_manual(name = 'Statum',
values = strata_pal3,
labels = names(strata_pal3)) +
coord_equal() +
theme_void() +
theme(legend.position="none") +
labs(title = 'human classification')  +
theme(plot.title = element_text(hjust = 0.5),
plot.margin = unit(c(0.0,0.0,0.0,0.0), "lines"))
#  a waffle of what percent habitats exist in UFO based on reclassification
reclassified <- rast('../../plot_post_stratification/data/processed/PredictedVegClass.tif')
#plot(reclassified, col = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00','#ffff33'))
area <- values(reclassified)
area <- area[!is.na(area)] # 4 SS, # 3 SD, 2 PJ, 1 MMS
area <- aggregate(area, list(num=area), length)
ltable <- data.frame(
num = c(1, 2, 3, 4, 5, 6),
Stratum = c('AS', 'MC', 'MMS', 'PJ', 'SD', 'SS')
)
vegclass <- area %>%
inner_join(., ltable,
by = 'num') %>%
select(Cells = x, RasterValue = num, Stratum) %>%
mutate(Percent = round((Cells/sum(Cells) ) *100)) %>%
arrange(-Percent)
strata_pal <- strata_pal[order(match(names(strata_pal),vegclass$Code))]
strata_pal2 <- strata_pal[1:nrow(vegclass)]
reclass_waffle <- ggplot(vegclass, aes(fill = Stratum, values = Percent)) +
geom_waffle(color = 'white') +
scale_fill_manual(name = 'Statum',
values = strata_pal2,
labels = names(strata_pal2)) +
coord_equal() +
theme_void() +
theme(legend.position="none") +
labs(title = 're-modeled classification')  +
theme(plot.title = element_text(hjust = 0.5),
plot.margin = unit(c(0.0,0.0,0.0,0.0), "lines"))
plot_col <- plot_grid(strata_waffle, random_waffle,
reclass_waffle, legend, ncol = 1, rel_widths = c(1,1,1,1),
rel_heights = c(1,1,1,1))
title <- ggdraw() +
draw_label("Percent Land Cover",
fontface = 'bold', x = 0,  hjust = 0 ) +
theme(plot.margin = ggplot2::margin(unit(c(0.0,0.0,0.0,50), "lines")))
p <- plot_grid(
title, plot_col,
ncol = 1,
rel_heights = c(0.05, 1) )
save_plot(p, '../results/figures/Stratum_cover.png')
save_plot('../results/figures/Stratum_cover.png', p)
p
title <- ggdraw() +
draw_label("Percent Land Cover",
fontface = 'bold', x = 0,  hjust = 0 ) #+
p <- plot_grid(
title, plot_col,
ncol = 1,
rel_heights = c(0.05, 1) )
p
title <- ggdraw() +
draw_label("Percent Land Cover",
fontface = 'bold') #+
p <- plot_grid(
title, plot_col,
ncol = 1,
rel_heights = c(0.05, 1) )
p
save_plot('../results/figures/Stratum_cover.png', p)
png('../results/figures/Stratum_cover.png')
p
dev.off()
gc()
shhh <- suppressPackageStartupMessages
shhh(library(tidyverse))
shhh(library(terra))
shhh(library(sf))
shhh(library(here))
set.seed(72)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
strata_pal <- setNames(
c('#4A5A28', '#ADB1B9', '#CEB88E', '#574039', '#B64841',
'#1357a6', '#1B1212', '#F9E076', '#39993A', '#00688B'),
c('PJ', 'SS', 'SD', 'MMS', 'AS', 'RI', 'OT', 'GR', 'PP', 'MC')
)
stats <- c("mean", "variance", 'homogeneity', 'contrast', 'dissimilarity')
wind <- c(5, 5)
random <- file.path('../data/processed/',
list.files('../data/processed/',  pattern = '*Random*'))
reg <- file.path('../data/processed/',
list.files('../data/processed/',  pattern = '*Regular*'))
twenty22 <- read.csv('../data/processed/UFO_2022_AIM_CLASSIFIED.csv')
historicVeg <- read.csv('../data/processed/UFO_Veg_monitoring_CLASSIFIED.csv') %>%
mutate(across(where(is.character), ~ na_if(., "")))
plot_drawn <- (nrow(twenty22) + nrow(historicVeg))
plot_class <- bind_rows(twenty22, historicVeg) %>% drop_na()
reg_drawn <- do.call(rbind, lapply(reg, function(x)
read.csv(x, stringsAsFactors = FALSE)))
reg_pts <- reg_drawn %>%
drop_na() %>%
filter(VegClass %in% c('AS', 'MC', 'PJ', 'SD', 'SS', 'MMS'))
random_drawn <- do.call(rbind, lapply(random, function(x)
read.csv(x, stringsAsFactors = FALSE))) %>%
mutate(across(where(is.character), ~ na_if(., "")))
random_pts <- random_drawn %>% drop_na()
rm(random, twenty22, historicVeg)
p <- file.path(here::here(), 'data/processed')
reg_pts <-  reg_pts %>%
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
mutate(Type = 'Regular', .after = 'ID') %>%
mutate(ID = as.character(ID)) %>%
st_transform(26912) %>%
st_buffer(30)
random_pts <- random_pts %>%
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
mutate(Type = 'Random2', .after = 'ID') %>%
st_transform(26912) %>%
st_buffer(30) %>%
mutate(ID = as.character(ID)) %>%
mutate(across(where(is.character), ~na_if(., ""))) %>%
filter(VegClass %in% c('PJ', 'SD', 'SS', 'MMS'))
veg_pts <- plot_class %>%
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326) %>%
mutate(Type = 'Stratified', .after = 'ID') %>%
st_transform(26912) %>%
st_buffer(30) %>%
mutate(ID = as.character(ID))
# AIM DATA post K-Means is read in here
#veg_pts <- st_read(file.path(p, '/reclassified_AIM/reclassified_AIM.shp'), quiet = T) %>%
#  st_transform(26912) %>%  # these alreday buffered by type.
#  rename(ID = PlotKey, Type = Plot, VegClass = Veg_type) %>%
#  bind_rows(., computer_pts) %>%
#  drop_na() %>%
#  vect()
# alt route use the manually classified
veg_pts <- bind_rows(veg_pts, random_pts, reg_pts) %>%
as(., "Spatial") %>%
vect()
rm(reg_pts, random_pts, plot_drawn, random_drawn, reg_drawn)
train_prop <- 0.7
mTry <- 4
nTT <- 1000
sF <- 1.5
I <- 0.01
train <- read.csv(file.path('../data/processed/', 'rf_training_data.csv')) %>%
select(class)
classes <- train %>%
count(class) %>%
mutate(values = paste0(class, "-", n)) %>%
pull(values)
test <- read.csv(file.path('../data/processed/', 'rf_testing_data.csv'))
prds <- '../results/stats'
veg_rf_model <- readRDS(file = file.path(prds, 'RandomForest2022-10-31.rds'))
test$class <- as.factor(test$class)
data.frame(randomForest::importance(veg_rf_model, type = 2))# %>% # modifies in place!!! OOP :-) BUT assigned to deal with markdown.
#  rownames_to_column('Variable') %>%
#  arrange(-MeanDecreaseGini) %>% # these results are to in the weeds
#  knitr::kable( col.names = c('Variable', 'Importance'),  align = "l", digits = 3,
#                caption = "Variable Importance in Random Forest Model")
# plot(veg_rf_model) # beyond the scope of the write-up
# generate a confusion matrix to determine accuracy on real data
test_prediction <- predict(veg_rf_model, test)
cmRestrat <- caret::confusionMatrix(test_prediction, test$class)
rm(test_prediction, train_prop, test, prds, classes)
p <- '/media/sagesteppe/ExternalHD/UFO_AIM_Design_Stratification'
pts2test <- st_read('../data/processed/StratTest/TestSetStratification.shp', quiet = T) %>% vect()
gap <- rast('/media/sagesteppe/ExternalHD/UFO_AIM_Design_Stratification/processed/UFO_Strata.tif')
pts2test <- project(pts2test, crs(gap))
reprocessedGAP <- read.csv(file.path(p, 'processed', 'UFO_strata_areas.csv')) %>%
select(RasterValue, Code, Cells)
factor_lvls <- c("AS", "MC", "MMS", "PJ", "SD", "SS", "RI", "OT", "GR", "PP" )
a <- extract(gap, pts2test, method = 'simple', touches = F)
a <- a[complete.cases(a),]
pts2test <- st_as_sf(pts2test) %>%
st_drop_geometry() %>%
select(VegClass) %>%
rowid_to_column('ID')
mdsOrig <- a %>%
group_by(ID) %>% # these are the original values.
summarise(OriginalCover = Mode(BPS_CODE)) %>%
left_join(., pts2test, by = 'ID') %>%
left_join(., reprocessedGAP, by = c('OriginalCover' = 'RasterValue')) %>%
select(True = VegClass, Original = Code) %>%
mutate(across(.cols = everything(), ~ factor(.x, levels = factor_lvls)))
cmOrig <- caret::confusionMatrix(mdsOrig$True, mdsOrig$Original)
rm(factor_lvls, a, mdsOrig, gap)
library(waffle)
library(tidyverse)
library(cowplot)
# original land cover of sample design
p <- '../../UFO_AIM_Design_Stratification'
initialGAP <- read.csv(file.path(p, 'raw', 'lookupTable.txt'))
reprocessedGAP <- reprocessedGAP %>%
mutate(Percent = round((Cells/sum(Cells) ) *100)) %>%
arrange(-Percent)
strata_pal <- strata_pal[order(match(names(strata_pal),reprocessedGAP$Code))]
strata_waffle <- ggplot(reprocessedGAP, aes(fill = Code, values = Percent)) +
geom_waffle(color = 'white') +
scale_fill_manual(name = 'Statum',
values = strata_pal,
labels = names(strata_pal)) +
coord_equal() +
theme_void() +
labs(title = 'initial stratification')  +
guides(fill=guide_legend(ncol=2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.title.align = 0.5,
plot.margin = unit(c(0.0,0.0,0.0,0.0), "lines"))
legend <- get_legend(strata_waffle)
strata_waffle <- strata_waffle + theme(legend.position='none')
# now a waffle of what percent habitat plots were located actually IN ??
veg_pts <- veg_pts %>%
st_as_sf() %>%
st_drop_geometry() %>%
filter(Type != 'Stratified') %>%
group_by(VegClass) %>%
count() %>%
ungroup() %>%
mutate(Percent = round((n/sum(n))*100 ))  %>%
arrange(-Percent)
strata_pal <- strata_pal[order(match(names(strata_pal),veg_pts$VegClass))]
strata_pal3 <- strata_pal[1:nrow(veg_pts)]
random_waffle <- ggplot(veg_pts, aes(fill = VegClass, values = Percent)) +
geom_waffle(color = 'white') +
scale_fill_manual(name = 'Statum',
values = strata_pal3,
labels = names(strata_pal3)) +
coord_equal() +
theme_void() +
theme(legend.position="none") +
labs(title = 'human classification')  +
theme(plot.title = element_text(hjust = 0.5),
plot.margin = unit(c(0.0,0.0,0.0,0.0), "lines"))
#  a waffle of what percent habitats exist in UFO based on reclassification
reclassified <- rast('../../plot_post_stratification/data/processed/PredictedVegClass.tif')
#plot(reclassified, col = c('#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00','#ffff33'))
area <- values(reclassified)
area <- area[!is.na(area)] # 4 SS, # 3 SD, 2 PJ, 1 MMS
area <- aggregate(area, list(num=area), length)
ltable <- data.frame(
num = c(1, 2, 3, 4, 5, 6),
Stratum = c('AS', 'MC', 'MMS', 'PJ', 'SD', 'SS')
)
p1 <- '../../plot_post_stratification/data/processed'
rvals <- read.csv(file.path(p1, 'Extracted_raster_values.csv'))
area <- read.csv(file.path(p1, 'Count_OriginalStrat_raster_values.csv'))
shhh(library(circlize))
rvals <- rvals %>%
mutate(n = (n/sum(n))*100) %>%
pivot_wider(names_from = 'Reclassified', values_from = 'n') %>%
column_to_rownames('Original') %>% # for circle chart.
as.matrix()
colnames(rvals) <- paste0(' ', ltable$Stratum)
rownames(rvals) <- reprocessedGAP %>%
arrange(RasterValue) %>%
pull(Code)
colOrder <- c(" AS", " MMS"," PJ"," MC"," SD", " SS")
rowOrder <- c('AS', 'MMS', 'GR', 'PJ', 'PP', 'RI', 'SS', 'MC', 'SD', 'OT')
rvals <- rvals[ rowOrder, colOrder]
sp2 <- strata_pal # create a palette to mark the colors in both ends
names(sp2) <- paste0(' ', names(strata_pal))
all_pals<- c(strata_pal, sp2)
png('../results/figures/circular_plot.png')
dev.off()
png('../results/figures/circular_plot.png')
par(mar = c(1.5, 1.5, 4.1, 1.5))
circos.par(start.degree = 0)
chordDiagram(rvals, transparency = 0.5, directional = 1,
grid.col = all_pals, diffHeight  = -0.04,
big.gap = 10,
annotationTrackHeight = c(0.10, 0.10))
abline(h = 0, lty = 2, col = "#000000")
title("Movement of Pixels from stratification\n(bottom) to post stratification (top)")
circos.clear()
dev.off()
gc()
